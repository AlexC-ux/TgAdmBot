// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TgAdmBot.Database;

#nullable disable

namespace TgAdmBot.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230102070920_usernew")]
    partial class usernew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("TgAdmBot.Database.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayFormLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("billingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("callback")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("payTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("payerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("TgAdmBot.Database.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ObsceneWordsDisallowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VideoNotesDisallowed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VoiceMessagesDisallowed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarnsLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarnsLimitAction")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("TgAdmBot.Database.Marriage", b =>
                {
                    b.Property<int>("MarriageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Agreed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfConclusion")
                        .HasColumnType("TEXT");

                    b.HasKey("MarriageId");

                    b.ToTable("Marriages");
                });

            modelBuilder.Entity("TgAdmBot.Database.PrivateMessage", b =>
                {
                    b.Property<int>("PrivateMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Callback")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PrivateMessageId");

                    b.ToTable("PrivateMessages");
                });

            modelBuilder.Entity("TgAdmBot.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MarriageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrivateMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StickerMessagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TgUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UnmuteTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserRights")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoiceMessagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarnsCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("ChatId");

                    b.HasIndex("MarriageId");

                    b.HasIndex("PrivateMessageId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TgAdmBot.Database.VoiceMessage", b =>
                {
                    b.Property<int>("VoiceMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fileUniqueId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("recognizedText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VoiceMessageId");

                    b.HasIndex("ChatId");

                    b.ToTable("VoiceMessages");
                });

            modelBuilder.Entity("TgAdmBot.Database.User", b =>
                {
                    b.HasOne("TgAdmBot.Database.Chat", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TgAdmBot.Database.Marriage", "Marriage")
                        .WithMany()
                        .HasForeignKey("MarriageId");

                    b.HasOne("TgAdmBot.Database.PrivateMessage", null)
                        .WithMany("Users")
                        .HasForeignKey("PrivateMessageId");

                    b.Navigation("Chat");

                    b.Navigation("Marriage");
                });

            modelBuilder.Entity("TgAdmBot.Database.VoiceMessage", b =>
                {
                    b.HasOne("TgAdmBot.Database.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("TgAdmBot.Database.Chat", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TgAdmBot.Database.PrivateMessage", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
